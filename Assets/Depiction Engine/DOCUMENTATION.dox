/**
 * @mainpage
 *
 * # Officially Supported versions
 *
 * - __Unity (Windows, Android, WebGL)__ \n 
 * \n 
 *   + 2022.x
 * \n 
 *   + 2023.x
 * .
 *
 *
 * # Installation {#installationId}
 *
 * - __Creating a Project__ \n
 *
 * \n 
 *   + Make sure you have .NET 7 or higher installed. \n 
 * \n 
 *   + Import `Universal RP` from the `Package Manager` under "Windows -> Package Manager". \n 
 *     Create and assign a `Universal Render Pipeline Asset` to "Edit -> Project Settings -> Quality -> Render Pipeline Asset". \n 
 *    @note Only Universal Rendering Pipeline(URP) projects are officially supported for the moment.
 * \n  
 *   + Under "Edit -> Project Settings -> Player -> Other Settings" set the following values: \n 
 *    `Color Space*` = Linear \n 
 *	  `Api Compatibility Level*` = .NET Framework \n 
 *	  `Allow unsafe Code` = true \n 
 * \n 
 *   + Import `TexMeshPro` from the `Package Manager` under "Windows -> Package Manager". \n 
 * \n 
 *   + Import `Depiction Engine` from GitHub. \n
 *    @note A series of `DepictionEngine.ManagerBase`'s are required in the Scene and will automatically be created the moment an `DepictionEngine.Object` is first introduced to the Scene. Managers can also be created manually by right clicking the _Hierarchy Window_ and selecting "Managers" in the _Context Menu_.
 * . 
 *
 * - __Patching Universal Rendering Pipeline__ \n 
 * \n 
 *   + Some important `Shader Graph` nodes require the rendering pipeline to be modified to function properly. The patching should be performed automatically when the `DepictionEngine.RenderingManager` is created however you can also trigger it manually in your Scene `DepictionEngine.RenderingManager` by pressing the `Patch Universal Rendering Pipeline` button.
 *    @warning You might have to restart Unity after the Universal Rendering Pipeline as been patched.
 * .
 *
 * - __Javascript API__ \n
 *
 * \n 
 *   + To build the Javascript API, you will have to move the `WebGLTemplates` folder to "/Assets/". You should now be able to select the "Depiction Engine - Demo" WebGL Template under "Edit -> Project Settings -> Player -> Resolution and Presentation". \n 
 * \n 
 *   + Before you build for WebGL make sure all the managers are present in your Scene, if missing you can create them by right clicking the _Hierarchy Window_ and selecting "Managers" in the _Context Menu_. To handle the communication with Javascript you will also need to add a `DepictionEngine.JsonInterface` component in the "Managers" GameObject. You will also have to save your project and make sure it is included in your build under "File -> Build Settings -> Scenes in Build". \n 
 * \n 
 *   + If you want to control Post processing effects from Javascript make sure to read the '_Scripting_' point of the @ref postProcessingId "Post Processing" section. \n
 * .
 *
 *
 * # Overview
 *
 * ## Editor integration {#editorIntegrationId}
 *
 * - __New GameObject Menu items__ \n 
 * \n 
 *   + `Align View to Selected GeoAstroObject`: \n 
 *    When enabled, the current Scene Camera will always be perpendicular to the selected GeoAstroObject surface. \n 
 * \n 
 *   + `Auto Snap View to Terrain`: \n 
 *    When Enabled, the current Scene Camera will always have its target snap to the terrain. \n 
 * \n 
 *   + `Move View to GeoCoordinate`: \n 
 *    When triggered, a popup will be displayed allowing you to enter a GeoCoordinate you want the current Scene Camera target to quickly navigate to.
 * .
 * 
 * - __New Hierarchy Window Context Menu items__ \n 
 * \n 
 *   + When right clicking the _Hierarchy Window_ the _Context Menu_ will now contain a new item called "Depiction Engine" where all kinds of new objects and components can be created. Look for the "Depiction Engine -> Astro" items for different planet and map presets to help get you started. 
 * .
 *
 *
 * ## Instancing / Disposing
 *
 * - __Instancing__ \n 
 * \n 
 *   + Objects implementing `DepictionEngine.IDisposable` should be instanced using the `DepictionEngine.InstanceManager`. If `DepictionEngine.PoolManager.enablePooling` is true when instanced, `DepictionEngine.IDisposable` objects will be recycled from the pool, if an instance already exists, and its `DepictionEngine.IDisposable.Recycle` method will be called before initialization. \n 
 *	 ~~~~~~~~~~~~~{.cs}
 *	 InstanceManager.CreateInstance(type, ..., initializingContext);
 *	 ~~~~~~~~~~~~~
 * \n 
 *   + A `DepictionEngine.InitializationContext` will be supplied as a parameter to the `DepictionEngine.IScriptableBehaviour.Initialized` method(which acts as a constructor) and provides you with some context as to how the object was created. \n 
 * \n 
 *   + Depending on the context supplied to `DepictionEngine.IScriptableBehaviour.Initialized`, undo operations will be automatically recorded for unity objects such as `DepictionEngine.IScriptableBehaviour`.
 * .
 *
 * - __Disposing__ \n 
 * \n 
 *   + Objects implementing `DepictionEngine.IDisposable` need to be disposed with the `DepictionEngine.DisposeManager`. If `DepictionEngine.PoolManager.enablePooling` is true when disposed, `DepictionEngine.IDisposable` objects will be automatically added back to the pool unless a disposeContext is provided in which case they may be destroyed or go to the pool depending on context. \n 
 *	 ~~~~~~~~~~~~~{.cs}
 *	 DisposeManager.Destroy(object, disposeContext);
 *	 ~~~~~~~~~~~~~
 * \n 
 *   + Objects which do not implement `DepictionEngine.IDisposable` can also be disposed with the `DepictionEngine.DisposeManager`. Disposing using the `DepictionEngine.DisposeManager.Destroy` will automatically call `GameObject.Destroy` or `GameObject.DestroyImmediate` depending on whether we are in the Editor or not. \n 
 *	 ~~~~~~~~~~~~~{.cs}
 *	 DisposeManager.Dispose(object, disposeContext);
 *	 ~~~~~~~~~~~~~
 * \n 
 *   + Whether pooled or destroyed `DepictionEngine.IDisposable.OnDispose` will always be called and a `DepictionEngine.DisposeContext` will be supplied as a parameter to provide some context as to how the object was disposed. \n 
 * \n 
 *   + Depending on the context supplied to `DepictionEngine.IDisposable.OnDispose`, undo operations will be automatically recorded if the `DepictionEngine.IDisposable` contains dependencies that need to be Destroyed.
 * .
 *
 *
 * ## Double precision
 *
 * - __Origin Shifting__ \n 
 * \n 
 *   + Position objects at far greater distance from the world's origin with double (64bit) precision transforms and origin shifting, allowing you to create much larger projects than normally possible in Unity. It can be enabled under `DepictionEngine.RenderingManager.originShifting` and will be `true` by default. \n 
 * \n 
 *   + For performance reason empty `DepictionEngine.Object`'s will be automatically origin shifted only while they are selected in the Editor to allow for the manipulation tools(Move, Rotate, Scale...) to be displayed correctly while `DepictionEngine.VisualObject`'s will always be origin shifted as they are expected to have rendered visuals as childs. `DepictionEngine.Object`'s that do not require positioning will always be positioned at zero(origin) with no rotation(identity). If required this behaviour can be modified by any class which extends `DepictionEngine.Object` and overrides its `DepictionEngine.Object.RequiresPositioning` method to return `true`. \n 
 * \n 
 *   + Multiple Scene camera layout in the Editor are possible although at significant performance cost since the GameObjects will have to be moved for every camera render.
 * .
 * 
 *
 * ## Datasource
 *
 * - __Saving__ \n 
 * \n 
 *   + Only properties that have been marked as 'Out of Synch' will be pushed to the `DepictionEngine.Datasource` when a save operation is performed. Properties modified through the Editor should be automatically marked as 'Out of Synch' however, if need be, properties can also be marked manually using the `DepictionEngine.SceneManager.StartUserContext` / `DepictionEngine.SceneManager.EndUserContext` method. For properties to be persisted they need to have the `DepictionEngine.JsonAttribute`.
 *   ~~~~~~~~~~~~~{.cs}
 *   object.IsUserChange(
 * 		() => { 
 * 			//Perform property assignment. 
 * 		});
 *   ~~~~~~~~~~~~~
 * .
 *
 *
 * ## Shader
 *
 * - __Shader Graph integration__ \n 
 * \n 
 *   + All built-in shaders can be edited using Shader Graph.
 * .
 *
 * ## Post Processing {#postProcessingId}
 *
 * - __Scripting__ \n 
 * \n 
 *   + If you use a Global `Volume` for Post Processing effects and you want to control it from a script make sure to drag or assign your Volume into the `DepictionEngine.RenderingManager.postProcessVolume` property. Do the same for `UniversalRendererData` containing custom features such as Ambient Occlusion that you would like to control from script by dragging or assigning the renderer to the `DepictionEngine.RenderingManager.rendererData` property.
 *.
 *
 *
 * ## Procedural generation
 *
 * - __Configuration__ \n 
 * \n 
 *   + Any class extending `DepictionEngine.GeneratorBase` can be used to spawn procedurally generated objects provided you set its `DepictionEngine.GeneratorBase.seed` property to something other then -1. 
 * . 
 *
 * - __Code__ \n 
 * \n 
 *   + The type of procedural object to spawn, specified by the `DepictionEngine.FallbackValues`, will need to implement the following method. \n 
 *   ~~~~~~~~~~~~~{.cs}
 *   private static PropertyModifier GetProceduralPropertyModifier(PropertyModifierParameters parameters)
 *   ~~~~~~~~~~~~~
 *   Here is an example of a `DepictionEngine.Texture` object populating a `DepictionEngine.TextureModifier`: \n 
 *   ~~~~~~~~~~~~~{.cs}
 *       private static PropertyModifier GetProceduralPropertyModifier(PropertyModifierParameters parameters)
 *       {
 *           TextureModifier textureModifier = ProcessingFunctions.CreatePropertyModifier<TextureModifier>();
 *
 *           int textureSize = 256;
 *           textureModifier.Init(PopulateProceduralPixels(parameters, textureSize, textureSize, GetPixel), true, textureSize, textureSize, TextureFormat.RGBA32, false);
 *
 *           return textureModifier;
 *       }
 *
 *       protected delegate void GetPixelDelegate(PropertyModifierParameters parameters, float x, float y, out byte r, out byte g, out byte b, out byte a);
 *
 *       protected static byte[] PopulateProceduralPixels(PropertyModifierParameters parameters, int width, int height, GetPixelDelegate pixelCallback)
 *       {
 *           byte[] pixels = new byte[width * height * 4];
 *
 *          if (pixelCallback != null)
 *           {
 *               for (int y = 0; y < height; y++)
 *               {
 *                  for (int x = 0; x < width; x++)
 *                   {
 *                       pixelCallback(parameters, (x + 0.5f) / width, (y + 0.5f) / height, out byte r, out byte g, out byte b, out byte a);
 *
 *                       int startIndex = (y * width + x) * 4;
 *                       pixels[startIndex] = r;
 *                       pixels[startIndex + 1] = g;
 *                       pixels[startIndex + 2] = b;
 *                       pixels[startIndex + 3] = a;
 *                   }
 *               }
 *           }
 *
 *           return pixels;
 *       }
 *
 *       protected static void GetPixel(PropertyModifierParameters parameters, float x, float y, out byte r, out byte g, out byte b, out byte a)
 *       {
 *           //Add Procedural Algorithm here
             //Seed can be found in parameters.seed
 *           r = (byte)(x * 255);
 *           g = (byte)(y * 255);
 *           b = 0;
 *           a = 255;
 *       }
 *   ~~~~~~~~~~~~~
 *.
 *
 *
 */